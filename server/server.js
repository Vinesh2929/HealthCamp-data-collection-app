const express = require("express");
const pool = require("./db");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");
require("dotenv").config();
const PORT = process.env.PORT || 8080;
const app = express();
app.use(express.json());
app.use(
  cors({
    origin: "*",
    methods: ["GET", "POST"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

// Nurse Registration API
app.post("/register", async (req, res) => {
  const { first_name, last_name, email, password } = req.body;

  try {
    // ðŸ”¹ Check if email already exists
    const emailCheck = await pool.query(
      "SELECT * FROM nurses WHERE email = $1",
      [email]
    );
    if (emailCheck.rows.length > 0) {
      return res.status(400).json({ message: "Email already registered" });
    }

    // Hash the password before saving
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert nurse into the database (Auto-generated nurse_id starts at 2222)
    const result = await pool.query(
      `INSERT INTO nurses (first_name, last_name, email, password) 
       VALUES ($1, $2, $3, $4) 
       RETURNING nurse_id`,
      [first_name, last_name, email, hashedPassword]
    );

    res.status(201).json({
      message: "Nurse registered successfully",
      nurse_id: result.rows[0].nurse_id, // Return autogenerated sequential ID
    });
  } catch (error) {
    console.error("Error registering nurse:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Nurse Login API (Use `nurse_id` instead of email)
app.get("/login", async (req, res) => {
  const { nurse_id, password } = req.body;

  try {
    // Check if nurse exists by ID
    const result = await pool.query(
      "SELECT * FROM nurses WHERE nurse_id = $1",
      [nurse_id]
    );
    if (result.rows.length === 0) {
      return res.status(400).json({ message: "Invalid Nurse ID or password" });
    }

    const nurse = result.rows[0];

    // ðŸ”¹ Compare entered password with stored hashed password
    const isMatch = await bcrypt.compare(password, nurse.password);
    if (!isMatch) {
      return res.status(400).json({ message: "Invalid Nurse ID or password" });
    }

    // Generate JWT token for authentication
    const token = jwt.sign(
      { nurse_id: nurse.nurse_id },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({ message: "Login successful", token });
  } catch (error) {
    console.error("Error logging in:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Start Server
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
